;/*********************************************
;   CPA-A, LAB7
;
;   Filnavn : "uart.c"
;
;   EXTENDED, polled driver for Mega16's USART
;   The prototypes are defined in the header "uart.h".
;
;   STK500 setup :
;
;   Header "RS232 spare" connected to RXD/TXD :
;   RXD = PORTD, bit0
;   TXD = PORTD, bit1
;
;   CodeVisionAVR C Compiler
;
;   Henning Hargaard 26/10 2008
;**********************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;
;// Constants
;#define XTAL 3686400
;
;/*************************************************************************
;USART initilization.
;         Asyncronous mode.
;	RX and TX enabled.
;	No interrupts enabled.
;	Baud rate = Parameter.
;	Data bits = Parameter.
;	Number of Stop Bits = 1.
;	No Parity.
;Parameters:
;	BaudRate: Wanted Baud Rate.
;	Databits: Wanted number of Data Bits.
;*************************************************************************/
;void InitUART( unsigned long BaudRate, unsigned char DataBit )
; 0001 0028 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0029 unsigned int TempUBRR;
; 0001 002A 
; 0001 002B   if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	BaudRate -> Y+3
;	DataBit -> Y+2
;	TempUBRR -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 002C   {
; 0001 002D     // "Normal" clock, no multiprocesser mode (= default)
; 0001 002E     UCSRA = 0b00100000;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 002F     // No interrupts enabled
; 0001 0030     // Receiver enabled
; 0001 0031     // Transmitter enabled
; 0001 0032     // No 9 bit operation
; 0001 0033     UCSRB = 0b00011000;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0034     // Asynchronous operation, 1 stop bit, no parity
; 0001 0035     // Bit7 always has to be 1
; 0001 0036     // Bit 2 and bit 1 controlles the number of databits
; 0001 0037     UCSRC = 0b10000000 | (DataBit-5)<<1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0038     // Set Baud Rate according to the parameter BaudRate:
; 0001 0039     // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
; 0001 003A     //                   then write the two 8-bit registers seperately):
; 0001 003B     TempUBRR = XTAL/(16*BaudRate) - 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 003C     // Write upper part of UBRR
; 0001 003D     UBRRH = TempUBRR >> 8;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 003E     // Write lower part of UBRR
; 0001 003F     UBRRL = TempUBRR;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0040   }
; 0001 0041 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;/*************************************************************************
;  Returns 0, if the UART has NOT received a new character.
;  Returns value <> 0, if the UART HAS received a new character.
;*************************************************************************/
;unsigned char CharReady()
; 0001 0048 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 0049    return UCSRA.7;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 004A }
;PCODE: $00000044 VOL: 0
;
;/*************************************************************************
;Awaits new character received.
;Then this character is returned.
;*************************************************************************/
;char ReadChar()
; 0001 0051 {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0052   // Wait for new character received
; 0001 0053   while ( UCSRA.7 == 0 )
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0054   {}
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0055   // Then return it
; 0001 0056   return UDR;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0057 }
;PCODE: $0000004F VOL: 0
;
;/*************************************************************************
;Awaits transmitter-register ready.
;Then it send the character.
;Parameter:
;     Tegn: Character for sending.
;*************************************************************************/
;void SendChar(char Tegn)
; 0001 0060 {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0061   // Wait for transmitter register empty (ready for new character)
; 0001 0062   while ( UCSRA.5 == 0 )
;	Tegn -> Y+0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 0063   {}
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0064   // Then send the character
; 0001 0065   UDR = Tegn;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0066 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;/*************************************************************************
;Sends 0-terminated string (stored in FLASH memory).
;Parameter:
;   Streng: Pointer to the string.
;*************************************************************************/
;void SendStringFlash(flash char* Streng)
; 0001 006E {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 006F   // Repeat untill zero-termination
; 0001 0070   while (*Streng != 0)
;	*Streng -> Y+0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0071   {
; 0001 0072     // Send the character pointed to by "Streng"
; 0001 0073     SendChar(*Streng);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0074     // Advance the pointer one step
; 0001 0075     Streng++;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0076   }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0077 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;/*************************************************************************
;Sends 0-terminated string (stored in SRAM memory).
;Parameter:
;   Streng: Pointer to the string.
;*************************************************************************/
;void SendStringSRAM(char* Streng)
; 0001 007F {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0080   // Repeat untill zero-termination
; 0001 0081   while (*Streng != 0)
;	*Streng -> Y+0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0082   {
; 0001 0083     // Send the character pointed to by "Streng"
; 0001 0084     SendChar(*Streng);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0085     // Advance the pointer one step
; 0001 0086     Streng++;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0087   }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0088 }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;/*************************************************************************
;Converts the integer "Tal" to an ASCII string - and then sends this string
;using the USART.
;Makes use of the C standard library <stdlib.h>.
;Parameter:
;      Tal: The integer to be converted and send.
;*************************************************************************/
;void SendInteger(int Tal)
; 0001 0092 {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0093 char array[7];
; 0001 0094   // Convert the integer til an ASCII string (array)
; 0001 0095   itoa(Tal, array);
;PCODE: $00000085 VOL: 0
;	Tal -> Y+7
;	array -> Y+0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0096   // - then send the string
; 0001 0097   SendStringSRAM(array);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0098 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
