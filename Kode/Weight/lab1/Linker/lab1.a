;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "uart.h"
;#include <delay.h>
;
;#define ADSC ADCSRA.6
;#define ADLAR ADMUX.5
;
;
;void main()
; 0000 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000B 
; 0000 000C     int adc_result;
; 0000 000D     InitUART(9600, 8);      // UART'en initieres.
;	adc_result -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000E 
; 0000 000F     ///// PWM ////////////////
; 0000 0010     DDRD.5 = 1;             // Port D.5(OCR1A) initieres til en udgang.
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0011     TCCR1A = 0b10000011;    // non-inverting
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0012     TCCR1B = 0b00000010;    // Prescale sættes til 8. CS12, CS11 og CS10 sættes til hhv. 010
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0013                               // Register TCCR1A og B initieres. "Phase Correct PWM mode", 10 bit
; 0000 0014                               //
; 0000 0015     OCR1A = 0;              // PWM signalet sætter som udgangspunkt til nul. Dioden lyser ved maksimal styrke.
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0016     //////////////////////////
; 0000 0017 
; 0000 0018     ////// ADC ///////////////
; 0000 0019     ADMUX = 0b01000000;     // Multiplex'eren vælger ADC0, ADLAR = 0, intern 5 volts referance.
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A     ADCSRA = 0b11000101;    // ADCSRA registeret tændes, div factor på 32(frekvensen ligger mellem 50 og 200 Hz)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001B                             // Konverteringen sættes igang.
; 0000 001C     //////////////////////////
; 0000 001D 
; 0000 001E     while(1)
;PCODE: $0000001F VOL: 0
; 0000 001F     {
; 0000 0020 
; 0000 0021              //
; 0000 0022         if(ReadChar() == 'R')
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0023         {
; 0000 0024             ADCSRA.6 = 1;   // Konverteringen startes igen
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0025             ////// ADC /////////////////
; 0000 0026             while (ADCSRA.6)          // Den springer først over "while", når konverteringen er færdig.
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0027             {}
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0028 
; 0000 0029             adc_result = ADCW;        // Resultatet fra ADC gemmes i en variabel.
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002A             SendInteger(adc_result);  // Resultatet fra AD konverteringen sendes i terminalen.
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002B             SendChar('\n');
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002C 
; 0000 002D 
; 0000 002E         }
; 0000 002F 
; 0000 0030     }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0031 
; 0000 0032 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
